const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// Replace with your bot token
const token = '7450786770:AAHeRvsxhmd3gbwL110Di-zuStJQDwLbrLQ';
const bot = new TelegramBot(token, { polling: true });

const adminPassword = '546278';
let adminLoggedIn = {}; // Track login status per admin user
let bannedUsers = [];
let userActivity = {}; // Track images generated by each user
let allowImageGeneration = {}; // Track if user can generate an image

// Admin users allowed to access admin panel
const adminChatIds = [6280543576, 7192531319];

// Channels for verification
const channels = [
  '@jiohackerteam', // Replace with actual channel username
  '@nkcyber2400',
  '@NeonNexus69'
];

// Exempted chat ID for bypassing verification
const exemptedChatId = 7192531319;

// Start command with verification check
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name;

  try {
    // Check if user is banned
    if (bannedUsers.includes(chatId)) {
      bot.sendMessage(chatId, "üö´ You are banned from using this bot.");
      return;
    }

    // Bypass verification for exempted user
    if (chatId === exemptedChatId) {
      showMainMenu(chatId, firstName);
      return;
    }

    // Check if user has joined all channels
    let allJoined = true;
    for (const channel of channels) {
      try {
        const member = await bot.getChatMember(channel, chatId);
        if (member.status === 'left') {
          allJoined = false;
        }
      } catch (error) {
        allJoined = false;
      }
    }

    if (!allJoined) {
      let joinMessage = `Hello ${firstName}! To use this bot, please join the following channels:\n\n`;
      channels.forEach(channel => joinMessage += `${channel}\n`);
      joinMessage += "\nOnce you've joined, click the button below to verify.";

      bot.sendMessage(chatId, joinMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "Verify", callback_data: "verify" }]
          ]
        }
      });
    } else {
      showMainMenu(chatId, firstName);
    }
  } catch (error) {
    bot.sendMessage(chatId, "An error occurred during the verification process.");
  }
});

// Verification button callback
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const firstName = callbackQuery.from.first_name;

  if (callbackQuery.data === "verify") {
    try {
      let allJoined = true;
      for (const channel of channels) {
        try {
          const member = await bot.getChatMember(channel, chatId);
          if (member.status === 'left') {
            allJoined = false;
          }
        } catch (error) {
          allJoined = false;
        }
      }

      if (allJoined) {
        bot.sendMessage(chatId, "Verification successful! Welcome to the bot.");
        showMainMenu(chatId, firstName);
      } else {
        bot.sendMessage(chatId, "Please join all channels to proceed.");
      }
    } catch (error) {
      bot.sendMessage(chatId, "An error occurred during verification. Please try again.");
    }
  }
});

// Show main menu
function showMainMenu(chatId, firstName) {
  bot.sendMessage(chatId, `Welcome, ${firstName}! Choose an option below:`, {
    reply_markup: {
      keyboard: [
        [{ text: "üñºÔ∏è Generate Image" }],
        [{ text: "‚ÑπÔ∏è My Generated Images" }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
}

// Handle main menu actions
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  try {
    if (text === "üñºÔ∏è Generate Image") {
      allowImageGeneration[chatId] = true;
      bot.sendMessage(chatId, "Please enter a prompt to generate an image:");
    } else if (text === "‚ÑπÔ∏è My Generated Images") {
      if (userActivity[chatId] && userActivity[chatId].length > 0) {
        userActivity[chatId].forEach((img, index) => {
          bot.sendPhoto(chatId, img.url, { caption: `${index + 1}. ${img.prompt}` });
        });
      } else {
        bot.sendMessage(chatId, "You haven't generated any images yet.");
      }
    } else if (text === "/adminpanel") {
      if (adminChatIds.includes(chatId)) {
        bot.sendMessage(chatId, "Please enter the admin password:");
      } else {
        bot.sendMessage(chatId, "‚ö†Ô∏è You are not authorized to access the admin panel.");
      }
    } else if (text === adminPassword && adminChatIds.includes(chatId)) {
      adminLoggedIn[chatId] = true;
      bot.sendMessage(chatId, "üîì Admin logged in successfully! Available commands:\n\n/viewUsers - View user activity\n/ban - Ban a user\n/unban - Unban a user");
    } else if (text === "/viewUsers" && adminLoggedIn[chatId]) {
      let userInfo = "üë• User Activity:\n\n";
      for (const userId in userActivity) {
        const userImages = userActivity[userId].map(img => `  - Prompt: ${img.prompt}\n`).join('');
        userInfo += `User ID: ${userId}\nUsername: ${userActivity[userId][0].username || "N/A"}\n${userImages}\n`;
      }
      bot.sendMessage(chatId, userInfo || "No user activity found.");
    } else if (text.startsWith("/ban") && adminLoggedIn[chatId]) {
      const userIdToBan = parseInt(text.split(' ')[1]);
      if (userIdToBan && !bannedUsers.includes(userIdToBan)) {
        bannedUsers.push(userIdToBan);
        bot.sendMessage(chatId, `üö´ User ID ${userIdToBan} has been banned.`);
      } else {
        bot.sendMessage(chatId, "‚ö†Ô∏è Invalid user ID or user is already banned.");
      }
    } else if (text.startsWith("/unban") && adminLoggedIn[chatId]) {
      const userIdToUnban = parseInt(text.split(' ')[1]);
      if (userIdToUnban && bannedUsers.includes(userIdToUnban)) {
        bannedUsers = bannedUsers.filter(id => id !== userIdToUnban);
        bot.sendMessage(chatId, `‚úÖ User ID ${userIdToUnban} has been unbanned.`);
      } else {
        bot.sendMessage(chatId, "‚ö†Ô∏è Invalid user ID or user is not banned.");
      }
    } else if (allowImageGeneration[chatId] && text && !text.startsWith("/")) {
      const prompt = text;
      allowImageGeneration[chatId] = false; // Reset after receiving a prompt
      try {
        const response = await axios.get(`https://api.pikaapis.my.id/ImgGen/BlackBox.php?prompt=${encodeURIComponent(prompt)}`);
        const imageUrl = response.data.image_url;

        if (!userActivity[chatId]) {
          userActivity[chatId] = [];
        }
        userActivity[chatId].push({ prompt, url: imageUrl, username: msg.from.username || "N/A" });

        bot.sendPhoto(chatId, imageUrl, { caption: `Generated image for prompt: "${prompt}"` });
      } catch (error) {
        bot.sendMessage(chatId, "‚ö†Ô∏è Error generating image. Please try again.");
      }
    } else if (!allowImageGeneration[chatId] && text && !text.startsWith("/")) {
      bot.sendMessage(chatId, "‚ùå Please press 'üñºÔ∏è Generate Image' and enter a prompt to generate an image.");
    }
  } catch (error) {
    bot.sendMessage(chatId, "An unexpected error occurred. Please try again.");
  }
});
